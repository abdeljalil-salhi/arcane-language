expr        :   KEYWORD:auto IDENTIFIER EQ expr
            :   comp-expr ( ( KEYWORD:and | KEYWORD:or ) comp-expr )*

comp-expr   :   KEYWORD:not comp-expr
            :   arith-expr ( ( EEQ | NEQ | LT | LTE | GT | GTE ) arith-expr )*

arith-expr  :   term ( ( PLUS | MINUS ) term )*

term        :   factor ( ( MUL | DIV | MOD ) factor )*

factor      :   ( PLUS | MINUS ) factor
            :   power

power       :   call ( ( POW ) factor )*

call        :   atom ( LPAREN ( expr ( COMMA expr )* )? RPAREN )*

atom        :   INT | FLOAT | IDENTIFIER
            :   LPAREN expr RPAREN
            :   if-expr
            :   for-expr
            :   while-expr
            :   func-def

if-expr     :   KEYWORD:if expr KEYWORD:then expr
                (KEYWORD:elif expr KEYWORD:then expr)*
                (KEYWORD:else expr)?

for-expr    :   KEYWORD:for IDENTIFIER EQ expr KEYWORD:to expr
                ( ( KEYWORD:increment | KEYWORD:decrement ) expr )? KEYWORD:then expr

while-expr  :   KEYWORD:while expr KEYWORD:then expr

func-def    :   KEYWORD:const IDENTIFIER?
                LPAREN ( IDENTIFIER ( COMMA IDENTIFIER )* )? RPAREN
                ARROW expr
